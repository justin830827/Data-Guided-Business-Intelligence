install.packages("pcalg")
biocLite("RBGL")
# Load the libraries
# To install pcalg library you may first need to execute the following commands:
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
# Load the libraries
library(vars)
library(urca)
# Load the libraries
library(vars)
library(urca)
library(pcalg)
library(pcalg)
library(pcalg)
# To install pcalg library you may first need to execute the following commands:
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
library(forecast)
install.packages("vars")
install.packages("urca")
install.packages("pcalg")
# Load the libraries
library(vars)
library(urca)
library(pcalg)
install.packages("RBGL")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RBGL", version = "3.8")
library(pcalg)
# Read the input data
data <- read.csv("data.csv")
setwd("~/Desktop/CSC 591-063/Assignment/PROJECT Causal Network Inference")
# Read the input data
data <- read.csv("data.csv")
# Build a VAR model
# Select the lag order using the Schwarz Information Criterion with a maximum lag of 10
# see ?VARSelect to find the optimal number of lags and use it as input to VAR()
optimal_lags <- VARselect(data, type="const")
varModel <- VAR(data, p = optimal_lags$selection[3])
# Extract the residuals from the VAR model
# see ?residuals
residuals <- residuals(varModel)
# Check for stationarity using the Augmented Dickey-Fuller test
# see ?ur.df
ad_test <- apply(residuals, 2, ur.df)
lapply(ad_test, summary)
# Check whether the variables follow a Gaussian distribution
# see ?ks.test
ks_test <- apply(residuals, 2, ks.test, y = "pnorm")
# Write the residuals to a csv file to build causal graphs using Tetrad software
write.csv(x = residuals,file = "residuals.csv",row.names = FALSE)
# PC Algorithm
suffStat <- list(C = cor(residuals), n = nrow(residuals))
pc_fit <-pc(suffStat,indepTest = gaussCItest,alpha = 0.1,labels = colnames(residuals),verbose = TRUE)
plot(pc_fit, main = "PC Output")
# LiNGAM Algorithm
lingam(residuals, verbose = TRUE)
lapply(ad_test, summary)
summary(ad_test)
lapply(ad_test, summary)
# Check whether the variables follow a Gaussian distribution
# see ?ks.test
ks_test <- apply(residuals, 2, ks.test, y = "pnorm")
lapply(ks_test, summary)
lapply(ks_test)
ks_test
plot(pc.fit, main="PC algorithm")
plot(pc_fit, main="PC algorithm")
require(Rgraphviz)
install.packages("Rgraphviz")
# LiNGAM Algorithm
lingam_fit <- lingam(residuals)
plot(lingam_fit, main="LINGAM algorithm")
lingam_fit
print(ks_test)
# LiNGAM Algorithm
lingam_fit <- lingam(residuals,verbose = TRUE)
(suffStat = suffStat ,indepTest = gaussCItest,alpha = 0.1,labels = colnames(residuals),verbose = TRUE)
pc_fit <-pc(suffStat = suffStat, indepTest = gaussCItest,alpha = 0.1,labels = colnames(residuals),verbose = TRUE)
